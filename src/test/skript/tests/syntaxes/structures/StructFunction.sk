function {@function}) :: boolean:
	return true

options:
	function: foo(

function local() :: number:
	return 1

local function local() :: number:
	return 2

local function bar() :: boolean:
	return true

local function _blob() :: string:
	return "blub"

test "functions":
	assert foo() is true with "function return type failed"
	assert local() is not 1 with "global function parsed before local function"
	assert bar() is true with "local function didn't execute correctly"
	assert _blob() is "blub" with "function that starts with underscore didn't execute correctly"

parse:
	results: {StructFunction::hints::1::*}
	code:
		function hint_test_1(x: number):
			set {_a} to {_x} in lowercase

parse:
	results: {StructFunction::hints::2::*}
	code:
		function hint_test_2(x: numbers):
			set {_a::*} to {_x::*} in lowercase

test "function structure type hints":
	assert {StructFunction::hints::1::*} contains "Expected variable '{_x}' to be a text, but it is a number" with "Hint failed (%{StructFunction::hints::1::*}%)"
	assert {StructFunction::hints::2::*} contains "Expected variable '{_x::*}' to be a text, but it is a number" with "Hint failed (%{StructFunction::hints::2::*}%)"
